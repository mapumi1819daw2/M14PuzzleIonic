import {Component, ElementRef, ViewChild} from '@angular/core';
import { Camera, CameraOptions } from '@ionic-native/camera';
import { AndroidPermissions } from '@ionic-native/android-permissions';


/**
 * Component que mostra el funcionament de la Camera
 * ionic cordova plugin add cordova-plugin-camera
 * npm install --save @ionic-native/camera
 * ionic cordova plugin add cordova-plugin-android-permissions
 * npm install --save @ionic-native/android-permissions
 * @author sergi.grau@fje.edu
 * @version 1.0 30.04.2018
 */

@Component({
  selector: 'camera',
  templateUrl: 'camera.html'
})
export class CameraPage {
@ViewChild("canvas") canvas: ElementRef;
  base64Image:any;

  constructor(private camera: Camera, private androidPermissions: AndroidPermissions) {

    this.androidPermissions.checkPermission(this.androidPermissions.PERMISSION.CAMERA).then(
      result => console.log('Té premís?',result.hasPermission),
      err => this.androidPermissions.requestPermission(this.androidPermissions.PERMISSION.CAMERA)
    );

    this.androidPermissions.requestPermissions([this.androidPermissions.PERMISSION.CAMERA, this.androidPermissions.PERMISSION.GET_ACCOUNTS]);
  }
   retallar:any =   prompt("Quantes caselles vols: 3x3 o 4x4?" );
  PUZZLE_DIFFICULTY : any = this.retallar;
 PUZZLE_HOVER_TINT : any= '#009900';
  _stage: any;
   _canvas: any = this.canvas.nativeElement;
   _pieces: any;
   _puzzleWidth: any;
   _puzzleHeight:any;
   _pieceWidth:any;
  _pieceHeight:any;
   _currentPiece:any;
  _currentDropPiece:any;

   _mouse;
  ferFoto(){
    const options: CameraOptions = {
      destinationType: this.camera.DestinationType.DATA_URL,
      quality: 100,
      targetWidth: screen.width -50,
      targetHeight: 350,
      encodingType: this.camera.EncodingType.JPEG,
      mediaType: this.camera.MediaType.PICTURE
    }

    this.camera.getPicture(options).then((imageData) => {
      // imageData is either a base64 encoded string or a file URI
       this.base64Image = 'data:image/jpeg;base64,' + imageData;
       this.init(this.base64Image);
    }, (err) => {
      // Handle error
    });
  }


   init(image) {

    this._img = new Image();
    this._img.addEventListener('load', this.onImage(), false);
    this._img.src = image.src;
  }


   onImage() {
    this._pieceWidth = Math.floor((screen.width/2) / this.PUZZLE_DIFFICULTY)
    this._pieceHeight = Math.floor((screen.height/2) / this.PUZZLE_DIFFICULTY)
    this._puzzleWidth = this._pieceWidth * this.PUZZLE_DIFFICULTY;
    this._puzzleHeight = this._pieceHeight * this.PUZZLE_DIFFICULTY;
    this.setCanvas();
    this.initPuzzle();
  }

   setCanvas() {


   this._stage = this._canvas.getContext('2d');
    this._canvas.width = this._puzzleWidth;
    this._canvas.height = this._puzzleHeight;
    this._canvas.style.border = "1px solid black";
  }

   initPuzzle() {
    this._pieces = [];
    this._mouse = {x: 0, y: 0};
    this._currentPiece = null;
    this._currentDropPiece = null;
    this._stage.drawImage(this._img, 0, 0, this._puzzleWidth, this._puzzleHeight, 0, 0, this._puzzleWidth, this._puzzleHeight);
    this.createTitle("Click to Start Puzzle");
    this.buildPieces();
  }

   createTitle(msg) {
    this._stage.fillStyle = "#000000";
    this._stage.globalAlpha = .4;
    this._stage.fillRect(100, this._puzzleHeight - 40, this._puzzleWidth - 200, 40);
    this._stage.fillStyle = "#FFFFFF";
    this._stage.globalAlpha = 1;
    this._stage.textAlign = "center";
    this._stage.textBaseline = "middle";
    this._stage.font = "60px Arial";
    this._stage.fillText(msg, this._puzzleWidth / 2, this._puzzleHeight - 20);
  }

   buildPieces() {
    var i;
    var piece;
    var xPos = 0;
    var yPos = 0;
    for (i = 0; i < this.PUZZLE_DIFFICULTY * this.PUZZLE_DIFFICULTY; i++) {
      piece = {};
      piece.sx = xPos;
      piece.sy = yPos;
      this._pieces.push(piece);
      xPos += this._pieceWidth;
      if (xPos >= this._puzzleWidth) {
        xPos = 0;
        yPos += this._pieceHeight;
      }
    }

    document.onmousedown = this.shufflePuzzle;

  }

   shufflePuzzle() {
    this._pieces = this.shuffleArray(this._pieces);
    this._stage.clearRect(0, 0, this._puzzleWidth, this._puzzleHeight);
    var i;
    var piece;
    var xPos = 0;
    var yPos = 0;
    for (i = 0; i < this._pieces.length; i++) {
      piece = this._pieces[i];
      piece.xPos = xPos;
      piece.yPos = yPos;
      this._stage.drawImage(this._img, piece.sx, piece.sy, this._pieceWidth, this._pieceHeight, xPos, yPos, this._pieceWidth, this._pieceHeight);
      this._stage.strokeRect(xPos, yPos, this._pieceWidth, this._pieceHeight);
      xPos += this._pieceWidth;
      if (xPos >= this._puzzleWidth) {
        xPos = 0;
        yPos += this._pieceHeight;
      }
    }
    var div = document.createElement("div");
    div.setAttribute("id", "divImg");
    var insertar =document.getElementById("time");
    document.body.insertBefore(div,insertar );
    var img = document.createElement("img");
    img.setAttribute("src",  this._img.src);
    document.getElementById("divImg").appendChild(img);




    document.onmousedown = this.onPuzzleClick;

  }

   onPuzzleClick(e) {
    if (e.layerX || e.layerX == 0) {
      this._mouse.x = e.layerX - this._canvas.offsetLeft;
      this._mouse.y = e.layerY - this._canvas.offsetTop;
    } else if (e.offsetX || e.offsetX == 0) {
      this._mouse.x = e.offsetX - this._canvas.offsetLeft;
      this._mouse.y = e.offsetY - this._canvas.offsetTop;
    }
    this._currentPiece = this.checkPieceClicked();
    if (this._currentPiece != null) {
      this._stage.clearRect(this._currentPiece.xPos, this._currentPiece.yPos, this._pieceWidth, this._pieceHeight);
      this._stage.save();
      this._stage.globalAlpha = .9;
      this._stage.drawImage(this._img, this._currentPiece.sx, this._currentPiece.sy,this._pieceWidth, this._pieceHeight, this._mouse.x - (this._pieceWidth / 2), this._mouse.y - (this._pieceHeight / 2), this._pieceWidth, this._pieceHeight);
      this._stage.restore();
      document.ontouchstart = this.updatePuzzle;
      document.ontouchend = this.pieceDropped;
    }

  }

   checkPieceClicked() {
    var i;
    var piece;
    for (i = 0; i < this._pieces.length; i++) {
      piece = this._pieces[i];
      if (this._mouse.x < piece.xPos || this._mouse.x > (piece.xPos + this._pieceWidth) || this._mouse.y < piece.yPos || this._mouse.y > (piece.yPos + this._pieceHeight)) {
        //PIECE NOT HIT
      } else {
        return piece;
      }
    }
    return null;
  }

   updatePuzzle(e) {
    this._currentDropPiece = null;
    if (e.layerX || e.layerX == 0) {
      this._mouse.x = e.layerX - this._canvas.offsetLeft;
      this._mouse.y = e.layerY - this._canvas.offsetTop;
    } else if (e.offsetX || e.offsetX == 0) {
      this._mouse.x = e.offsetX - this._canvas.offsetLeft;
      this._mouse.y = e.offsetY - this._canvas.offsetTop;
    }
    this._stage.clearRect(0, 0, this._puzzleWidth, this._puzzleHeight);
    var i;
    var piece;
    for (i = 0; i < this._pieces.length; i++) {
      piece = this._pieces[i];
      if (piece == this._currentPiece) {
        continue;
      }
      this._stage.drawImage(this._img, piece.sx, piece.sy, this._pieceWidth, this._pieceHeight, piece.xPos, piece.yPos, this._pieceWidth, this._pieceHeight);
      this._stage.strokeRect(piece.xPos, piece.yPos, this._pieceWidth, this._pieceHeight);
      if (this._currentDropPiece == null) {
        if (this._mouse.x < piece.xPos || this._mouse.x > (piece.xPos + this._pieceWidth) || this._mouse.y < piece.yPos || this._mouse.y > (piece.yPos + this._pieceHeight)) {
          //NOT OVER
        } else {
          this._currentDropPiece = piece;
          this._stage.save();
          this._stage.globalAlpha = .4;
          this._stage.fillStyle = this.PUZZLE_HOVER_TINT;
          this._stage.fillRect(this._currentDropPiece.xPos, this._currentDropPiece.yPos, this._pieceWidth, this._pieceHeight);
          this._stage.restore();
        }
      }
    }
    this._stage.save();
    this._stage.globalAlpha = .6;
    this._stage.drawImage(this._img, this._currentPiece.sx, this._currentPiece.sy, this._pieceWidth, this._pieceHeight, this._mouse.x - (this._pieceWidth / 2), this._mouse.y - (this._pieceHeight / 2), this._pieceWidth, this._pieceHeight);
    this._stage.restore();
    this._stage.strokeRect(this._mouse.x - (this._pieceWidth / 2), this._mouse.y - (this._pieceHeight / 2), this._pieceWidth, this._pieceHeight);
  }

   pieceDropped(e) {
    document.ontouchmove = null;
    document.ontouchend = null;
    if (this._currentDropPiece != null) {
      var tmp = {xPos: this._currentPiece.xPos, yPos: this._currentPiece.yPos};
      this._currentPiece.xPos = this._currentDropPiece.xPos;
      this._currentPiece.yPos = this._currentDropPiece.yPos;
      this._currentDropPiece.xPos = tmp.xPos;
      this._currentDropPiece.yPos = tmp.yPos;
    }
    this.resetPuzzleAndCheckWin();
  }

   resetPuzzleAndCheckWin() {
    this._stage.clearRect(0, 0, this._puzzleWidth, this._puzzleHeight);
    var gameWin = true;
    var i;
    var piece;
    for (i = 0; i < this._pieces.length; i++) {
      piece = this._pieces[i];
      this._stage.drawImage(this._img, piece.sx, piece.sy, this._pieceWidth, this._pieceHeight, piece.xPos, piece.yPos, this._pieceWidth, this._pieceHeight);
      this._stage.strokeRect(piece.xPos, piece.yPos, this._pieceWidth, this._pieceHeight);
      if (piece.xPos != piece.sx || piece.yPos != piece.sy) {
        gameWin = false;
      }
    }
    if (gameWin) {
      setTimeout(this.gameOver, 500);

    }
  }

   gameOver() {

    document.ontouchstart = null;
    document.ontouchmove = null;
    document.ontouchend = null;
    this.createTitle("PUZZLE FINISHED");
    // initPuzzle();

    var node = document.createElement("form");
    node.setAttribute("action", "./Results.html");
    node.setAttribute("id", "formButton");
    var insertar =document.getElementById("time");
    document.body.insertBefore(node,insertar );
    var button = document.createElement("button");
    button.setAttribute("onclick", "addUsername();");
    var textButton = document.createTextNode("Show Results");
    button.appendChild(textButton);
    document.getElementById("formButton").appendChild(button);


  }

   shuffleArray(o) {
    for (var j, x, i = o.length; i; j = Math.random() * i, x = o[--i], o[i] = o[j], o[j] = x) ;
    return o;
  }



}




